#Confirmar Docker Daemon est√° rodando
docker version
ps aux | grep docker
systemctl status docker

#Confirmar se existem containers em execucao
docker container ls


# Conferir imagem criada
docker image ls


# Iniciar orquestrador SWARM (caso ainda nao esteja inicializado)
docker swarm init


#Gerar comando para inserir demais nos no cluster (caso ainda nao estejam inseridos)
docker swarm join-token worker
docker swarm join-token manager


# Copiar e colar comando nos demais nos para ingressarem no cluster SWARM (worker ou manager) (caso ainda nao estejam inseridos)
docker swarm join --token token_gerado enderecoIP:2377


# Verificar (a partir de um manager) nos que estao no cluster e seus papeis
docker node ls


# Verificar containers em execucao por no
docker node ps host1 host2


# Criar novo servico rodando imagem enviada para Docker Hub
docker service create --name example05 -p 8080:80 --replicas 6 hubUserName/imagem_hub:tag


#Verificar nome dos nos e quantidade de containers em execucao por no
docker node ls
docker node ps linux-lab01.localdomain linux-lab02.localdomain linux-lab03.localdomain


# Aumentando as replicas para 12
docker service scale example05=12


#Verificar nome dos nos e quantidade de containers em execucao por no
docker node ls
docker node ps linux-lab01.localdomain linux-lab02.localdomain linux-lab03.localdomain


#Parar servico criado
docker service rm example05


# Confirmar se containers foram encerrados
docker node ps linux-lab01.localdomain linux-lab02.localdomain linux-lab03.localdomain


# Recriar servico com restricao de CPU e memoria por container
docker service create --name example05 -p 8080:80 --replicas 6 --limit-cpu 0.2 --limit-memory 32M hubUserName/imagem_hub:tag


# Validar no browser fazendo varios acessos


# Verificar logs do servico para verificar load balance
docker service logs -f example05


# Verificar estatisticas dos containers
docker stats


#Parar Servico e checar containers parando
docker service rm example05
docker container ls
